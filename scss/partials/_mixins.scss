@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      //interpolation
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

@mixin google-font($font) {
  $font: unquote($font);
  @import url(https://fonts.googleapis.com/css?family=#{$font})
}

@mixin warning {
  background-color: orange;
  color: #fff;

  &:hover {
    background-color: lighten(orange, 10%);
  }
}

@mixin box-shadow($shadows...) {
  box-shadow: $shadows;
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
}

@mixin apply-to-ie-6 {
  * html {
    @content;
  }
}

@mixin large-text {
  font: {
    size: 22px;
    weight: bold;
  }
}

@mixin rounded($radius: 6px) {
  border-radius: $radius;
}

@mixin a($color, $hcolor, $td: none, $b: 0, $pad: 1rem) {
    a {
      padding: $pad;
      text-decoration: $td;
      color: $color;
      border: $b;

      &:hover {
        padding: $pad;
        border: $b;
        color: $hcolor;
      }
    }
}


@mixin article-bp($columns, $width:100%, $cgap: 1rem) {
  .article {
    overflow: auto;
    flex-grow: 1;
    @include mq($from: desktop) {
        column-count: $columns;
        column-gap: $cgap;
        width: $width;
    }
  }
}

@mixin box($width: 100%, $height: 150px, $radius: 1px, $border: 0, $pad: 1rem) {
  // round   up the box
   @include rounded($radius);
  border: $border;
  width: $width;
  min-height: $height;
  padding: $pad;
  @content;
}

@mixin set-color($name,  $text: black) {
  //opposite color as the name of the box for a(links)
  $a-color: invert(color($name));
  .#{$name} {
    // styles for links
    @include a($a-color, lighten($a-color, 50%));

    //articles between this class
    @include article-bp(3);

    color: $text;
    background-color: color($name);
    @content;
  }
}

@mixin fancy-links {
  a {
    font-style: italic;
    text-decoration: none;
  }
}

@mixin container {
  display: flex;
  flex-wrap: wrap;
}


 @mixin breakpoint($point) {
   @if $point == desktop {
     @media (min-width: 70em) { @content ; }
  }
   @else if $point == laptop {
     @media (min-width: 64em) { @content ; }
  }
    @else if $point == tablet {
     @media (min-width: 37.5em)  { @content ; }
  }
  @else if $point == mobile {
     @media (max-width: 37.5em)  { @content ; }

  }
}
